### AZ CLI 
az login
#List all your subscriptions
az account list -o table --query "[].{Name:name, IsDefault:isDefault}"
#List default Subscription being used
az account list --query "[?isDefault == \`true\`].{Name:name, IsDefault:isDefault}" -o table

# In case you want to do it separated Subscription change your active subscription as shown
az account set --subscription <Add here SubID or Name> #Add your Subscription ID or Name

#Parameters
location=westus3
rg=lab-opn-branch
branchname=branch1
username=azureuser
password="Msft123Msft123" #Please change your password
vmsize=Standard_DS1_v2 #VM Size
mypip=$(curl -4 ifconfig.io -s) #Replace with your home Public IP in case you run this over Cloudshell
vmsubnetprefix=192.168.100.0/28

######### OPNsense SD-WAN parameters
ShellScriptName=configureopnsense.sh
scenarioOption="TwoNics"
virtualMachineSize=Standard_DS1_v2
virtualNetworkName=$branchname-vnet
existingvirtualNetwork=existing
VNETAddress=192.168.100.0/24 
UntrustedSubnetCIDR=192.168.100.16/28
TrustedSubnetCIDR=192.168.100.32/28
existingUntrustedSubnetName=untrusted
existingTrustedSubnetName=trusted

# Create Resource Group
az group create --name $rg --location $location --output none
# Create Virtual Network
echo Creating Virtual Network
az network vnet create -g $rg --name $virtualNetworkName --address-prefixes $VNETAddress --subnet-name main --subnet-prefix $vmsubnetprefix --output none
# Create untrusted subnetnet
echo Creating untrusted subnet
az network vnet subnet create -g $rg --vnet-name $virtualNetworkName --name $existingUntrustedSubnetName --address-prefixes $UntrustedSubnetCIDR --output none
# Create trusted subnetnet
echo Creating trusted subnet
az network vnet subnet create -g $rg --vnet-name $virtualNetworkName --name $existingTrustedSubnetName --address-prefixes $TrustedSubnetCIDR --output none

echo "Deploying OPNsense NVA1 on the $branchname"
nva1=$branchname-nvalb1
az deployment group create --name $branchname-nvalb1 --resource-group $rg \
--template-uri "https://raw.githubusercontent.com/dmauser/opnazure/master/ARM/main.json" \
--parameters scenarioOption=$scenarioOption virtualMachineName=$nva1 virtualMachineSize=$virtualMachineSize existingvirtualNetwork=$existingvirtualNetwork VNETAddress="[\"$VNETAddress\"]" virtualNetworkName=$virtualNetworkName UntrustedSubnetCIDR=$UntrustedSubnetCIDR TrustedSubnetCIDR=$TrustedSubnetCIDR existingUntrustedSubnetName=$existingUntrustedSubnetName existingTrustedSubnetName=$existingTrustedSubnetName Location=$location \
--no-wait

nva2=$branchname-nvalb2
echo "Deploying OPNsense NVA2 on the $branchname"
az deployment group create --name $branchname-nvalb2 --resource-group $rg \
--template-uri "https://raw.githubusercontent.com/dmauser/opnazure/master/ARM/main.json" \
--parameters scenarioOption=$scenarioOption virtualMachineName=$nva2 virtualMachineSize=$virtualMachineSize existingvirtualNetwork=$existingvirtualNetwork VNETAddress="[\"$VNETAddress\"]" virtualNetworkName=$virtualNetworkName UntrustedSubnetCIDR=$UntrustedSubnetCIDR TrustedSubnetCIDR=$TrustedSubnetCIDR existingUntrustedSubnetName=$existingUntrustedSubnetName existingTrustedSubnetName=$existingTrustedSubnetName Location=$location \
--no-wait

echo Adjusting OPNsense SD-WAN
echo Checking subnet status...
prState=''
while [[ $prState != 'Succeeded' ]];
do
    prState=$(az network vnet subnet show --name trusted -g $rg --vnet-name $virtualNetworkName --query provisioningState -o tsv)
    echo Trusted subnet "provisioningState="$prState
    sleep 5
done
prState=''
while [[ $prState != 'Succeeded' ]];
do
    prState=$(az network vnet subnet show --name untrusted -g $rg --vnet-name $virtualNetworkName --query provisioningState -o tsv)
    echo Unrusted subnet "provisioningState="$prState
    sleep 5
done

# Add NSG and rules
az network nsg create -g $rg --name $location-default-nsg --location $location -o none
az network nsg rule create -g $rg --nsg-name $location-default-nsg -n 'default-allow-https' --direction Inbound --priority 310 --source-address-prefixes $mypip --source-port-ranges '*' --destination-address-prefixes '*' --destination-port-ranges 443 --access Allow --protocol Tcp --description "Allow inbound HTTPS" --output none
az network nsg rule create -g $rg --nsg-name $location-default-nsg -n 'default-allow-vnetoutany' --direction Inbound --priority 320 --source-address-prefixes VirtualNetwork --source-port-ranges '*' --destination-address-prefixes '*' --destination-port-ranges '*' --access Allow --protocol '*' --description "Allow inbound VNET to Any for NVA Routing out" --output none
az network nsg rule create -g $rg --nsg-name $location-default-nsg  -n allow-udp500 --priority 330 --source-address-prefixes '*' --destination-address-prefixes '*' --destination-port-ranges 500 --direction Inbound --access Allow --protocol Udp -o none
az network nsg rule create -g $rg --nsg-name $location-default-nsg  -n allow-udp4500 --priority 340 --source-address-prefixes '*' --destination-address-prefixes '*' --destination-port-ranges 4500 --direction Inbound --access Allow --protocol Udp -o none

#echo Checking OPNSense provisioning state:
# az deployment group show --name branch-opnnva-TwoNics -g $rg --query properties.provisioningState -o tsv

# Ensure default NSG is associated to OPNSense Trusted and Untrusted Networks
# az network vnet subnet update --id $(az network vnet subnet list -g $rg --vnet-name $virtualNetworkName --query '[?contains(name,`'-Subnet'`)].id' -o tsv) --network-security-group "" -o none
# az network vnet subnet update --id $(az network vnet subnet list -g $rg --vnet-name $virtualNetworkName --query '[?contains(name,`'-Subnet'`)].id' -o tsv) --network-security-group $location-default-nsg -o none
az network vnet subnet update --name trusted --resource-group $rg --vnet-name $virtualNetworkName --network-security-group null  -o none
az network vnet subnet update --name untrusted --resource-group $rg --vnet-name $virtualNetworkName --network-security-group null  -o none
az network vnet subnet update --name trusted --resource-group $rg --vnet-name $virtualNetworkName --network-security-group $location-default-nsg -o none
az network vnet subnet update --name untrusted --resource-group $rg --vnet-name $virtualNetworkName --network-security-group $location-default-nsg -o none

# Misc remove NSG from OPNSense NICs 
az network nic update -g $rg -n $nva1-trusted-NIC --network-security-group null --output none
az network nic update -g $rg -n $nva1-Untrusted-NIC --network-security-group null --output none
az network nic update -g $rg -n $nva2-trusted-NIC --network-security-group null --output none
az network nic update -g $rg -n $nva2-Untrusted-NIC --network-security-group null --output none

# Deploy Azure Load Balancer for nva1 and nva2
echo Deploying Azure Load Balancer for nvas
az network lb create -g $rg --name $branchname-nvalb --sku Standard --frontend-ip-name frontendip1 --backend-pool-name nvabackend --vnet-name $branchname-vnet --subnet=$existingTrustedSubnetName -o none
az network lb probe create -g $rg --lb-name $branchname-nvalb --name httpsprobe --protocol tcp --port 443 -o none
az network lb rule create -g $rg --lb-name $branchname-nvalb --name haportrule --protocol all --frontend-ip-name frontendip1 --backend-pool-name nvabackend --probe-name httpsprobe --frontend-port 0 --backend-port 0 -o none

# Attach NVAs to the Backend as NICs
nvanames=$(az vm list -g $rg --query '[?contains(name,`'nva'`)].name' -o tsv)
for nvaname in $nvanames
do
  az network nic ip-config address-pool add \
  --address-pool nvabackend \
  --ip-config-name ipconfig1 \
  --nic-name $nvaname-trusted-NIC \
  --resource-group $rg \
  --lb-name $branchname-nvalb \
  --output none
done

echo Creating Branch VMs...
az vm create -n branch-vm1  -g $rg --image Ubuntu2204 --public-ip-sku Standard --size $vmsize -l $location --subnet main --vnet-name $branchname-vnet --admin-username $username --admin-password $password --nsg "" --no-wait

# UDR to reach Azure
nvalbip=$(az network lb show -g $rg -n $branchname-nvalb --query frontendIPConfigurations[0].privateIPAddress -o tsv)
## Creating UDR + Disable BGP Propagation
az network route-table create --name rt-$branchname-to-nva  --resource-group $rg --location $location --disable-bgp-route-propagation true --output none
## Default route to NVA
az network route-table route create --resource-group $rg --name default --route-table-name rt-$branchname-to-nva \
--address-prefix 0.0.0.0/0 \
--next-hop-type VirtualAppliance \
--next-hop-ip-address $nvalbip \
--output none
az network route-table route create --resource-group $rg --name exception --route-table-name rt-$branchname-to-nva \
--address-prefix $mypip/32 \
--next-hop-type Internet \
--output none
## Associating UDR to the subnet
az network vnet subnet update --vnet-name $branchname-vnet -g $rg --name main --route-table rt-$branchname-to-nva --output none
# Associate NSG to main subnet
az network vnet subnet update --vnet-name $branchname-vnet -g $rg --name main --network-security-group $location-default-nsg -o none

#Enabling boot diagnostics for all VMs in the resource group (Serial console)
echo Enabling boot diagnostics
az vm boot-diagnostics enable --ids $(az vm list -g $rg --query '[].{id:id}' -o tsv) -o none

echo "Installing net utilities inside VMs (traceroute, tcptraceroute, iperf3, hping3, and others)"
nettoolsuri="https://raw.githubusercontent.com/dmauser/azure-vm-net-tools/main/script/nettools.sh"
for vm in $(az vm list -g $rg --query "[?contains(storageProfile.imageReference.publisher,'Canonical')].name" -o tsv)
do
    echo "Executing script on VM: $vm"
    az vm run-command invoke \
        --resource-group $rg \
        --name $vm \
        --command-id RunShellScript \
        --scripts "curl -s $nettoolsuri | bash" \
        --no-wait
done

# Loop script to set auto-shutdown to 4am UTC
for vm in `az vm list -g $rg --query '[].{name:name}' -o tsv`
do
  az vm auto-shutdown --resource-group $rg --name $vm --time 0400 --output none
done

echo Deployment has finished
